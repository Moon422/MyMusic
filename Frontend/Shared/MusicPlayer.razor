@namespace MyMusic.Frontend.Shared

<div class="shadow-sm" style="height: 6rem; background: #D8D6D7;">
    @if (volumeSliderShown)
    {
        <div class="volume-control rounded-pill">
            <input type="range" min="0" max="100" @bind-value="PlaybackManager.Volume">
        </div>
    }
    <div class="d-flex align-items-center h-100">
        <div class="player-song-info">
            <div class="bg-danger" style="width: 4rem;">
                IMG
            </div>
            <div>
                @if (PlaybackManager.PlaybackStatus != PlaybackStatus.Stopped)
                {
                    <h4 class="m-0" style="color: #503b31;">@Format(PlaybackManager.Track.Name)</h4>
                    <h6 class="m-0" style="color: #503b31;">@Format(currentPlayPosition) /
                    @Format(PlaybackManager.TotalTime)</h6>
                }
            </div>
        </div>
        <div class="p-3 flex-grow-1 d-flex gap-3">
            <div class="player-control">
                <span class="oi oi-media-step-backward" title="media set backward" aria-hidden="true"></span>
            </div>
            @if (PlaybackManager.PlaybackStatus == PlaybackStatus.Loading)
            {
                <div class="player-control-spinner">
                    <img src="assets/spinner.gif" alt="">
                </div>
            }
            else
            {
                <div class="player-control" @onclick="PlayToggleBtnClicked">
                    <span class="oi oi-media-@PlayToggleIcon" title="media set forward" aria-hidden="true"></span>
                </div>
            }
            <div class="player-control">
                <span class="oi oi-media-step-forward" title="media set forward" aria-hidden="true"></span>
            </div>
            <div class="play-timeline flex-grow-1">
                <input type="range" min="0" max="@PlaybackManager.TotalTime.TotalMilliseconds"
                    value="@currentPlayPosition.TotalMilliseconds" @onchange="SeekCurrentPlayPosition">
            </div>
            <div class="player-control" @onmousedown="VolumnBtnClicked">
                <span class="oi oi-@VolumeIconName" title="media set forward" aria-hidden="true"></span>
            </div>
            <div class="player-control">
                <span class="oi oi-loop" title="media set forward" aria-hidden="true"></span>
            </div>
            <div class="player-control">
                <span class="oi oi-data-transfer-download" title="media set forward" aria-hidden="true"></span>
            </div>
        </div>
    </div>
</div>


@code {
    @inject IHowl Howl;

    @inject IHowlGlobal HowlGlobal;

    @inject HttpClient HttpClient;

    @inject PlaybackManager PlaybackManager;

    private bool volumeSliderShown = false;
    private System.Timers.Timer timer = new System.Timers.Timer();
    private TimeSpan currentPlayPosition;

    private string PlayToggleIcon
    {
        get
        {
            return PlaybackManager.PlaybackStatus == PlaybackStatus.Playing ? "pause" : "play";
        }
    }

    private string VolumeIconName
    {
        get
        {
            if (PlaybackManager.Muted)
            {
                return "volume-off";
            }

            if (PlaybackManager.Volume >= 60)
            {
                return "volume-high";
            }
            else if (PlaybackManager.Volume >= 0)
            {
                return "volume-low";
            }
            else
            {
                return "volume-off";
            }
        }
    }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        PlaybackManager.StateHasChangedCallback += StateHasChanged;

        Howl.OnPlay += e =>
        {
            PlaybackManager.TotalTime = e.TotalTime;
            PlaybackManager.PlaybackStatus = PlaybackStatus.Playing;
            timer.Start();
            StateHasChanged();
        };

        Howl.OnPause += e =>
        {
            PlaybackManager.PlaybackStatus = PlaybackStatus.Paused;
            timer.Stop();
            StateHasChanged();
        };

        Howl.OnEnd += e =>
        {
            PlaybackManager.PlaybackStatus = PlaybackStatus.Stopped;
            timer.Stop();
            StateHasChanged();
        };

        Howl.OnStop += e =>
        {
            PlaybackManager.PlaybackStatus = PlaybackStatus.Stopped;
            timer.Stop();
            StateHasChanged();
        };

        timer.Interval = 500;
        timer.Elapsed += async (o, e) =>
        {
            currentPlayPosition = await Howl.GetCurrentTime(PlaybackManager.CurentTrackId);
            StateHasChanged();
        };
    }

    private async void SeekCurrentPlayPosition(ChangeEventArgs e)
    {
        if (int.TryParse((string?)e.Value, out var position))
        {
            await Howl.Seek(PlaybackManager.CurentTrackId, TimeSpan.FromMilliseconds(position));
        }
    }

    private async void PlayToggleBtnClicked()
    {
        switch (PlaybackManager.PlaybackStatus)
        {
            case PlaybackStatus.Paused:
                PlaybackManager.PlaybackStatus = PlaybackStatus.Playing;
                await Howl.Play(PlaybackManager.CurentTrackId);
                break;
            case PlaybackStatus.Playing:
                PlaybackManager.PlaybackStatus = PlaybackStatus.Paused;
                await Howl.Pause(PlaybackManager.CurentTrackId);
                break;
            default:
                @* await PlaybackManager.ChangeTrack(); *@
                break;
        }
    }

    private void VolumnBtnClicked(MouseEventArgs args)
    {
        if (args.Button == 0)
        {
            volumeSliderShown = !volumeSliderShown;
        }
        else if (args.Button == 1)
        {
            PlaybackManager.Muted = !PlaybackManager.Muted;
            HowlGlobal.Mute(PlaybackManager.Muted);
        }
    }

    private string Format(string st)
    {
        if (st.Length < 12) return st;

        return st.Substring(0, 12) + "...";
    }

    private string Format(TimeSpan ts)
    {
        if (ts.Days > 0)
        {
            return $"{ts.Days}d {ts.Hours}h {ts.Minutes}m {ts.Seconds}s";
        }
        else if (ts.Hours > 0)
        {
            return $"{ts.Hours}h {ts.Minutes}m {ts.Seconds}s";
        }
        else if (ts.Minutes > 0)
        {
            return $"{ts.Minutes}m {ts.Seconds}s";
        }
        else
        {
            return $"{ts.Seconds}s";
        }
    }
}
