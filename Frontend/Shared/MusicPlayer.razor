@namespace MyMusic.Frontend.Shared

<div style="height: 6rem; background: #D8D6D7;">
    @if (volumeSliderShown)
    {
        <div class="volume-control rounded-pill">
            <input type="range" min="0" max="100" @bind-value="playbackInfo.Volume">
        </div>
    }
    <div class="d-flex align-items-center h-100">
        <div class="player-song-info">
            <div class="bg-danger" style="width: 4rem;">
                IMG
            </div>
            <div>
                <h4 class="m-0" style="color: #503b31;">Title</h4>
                <h6 class="m-0" style="color: #503b31;">Tagline</h6>
            </div>
        </div>
        <div class="p-3 flex-grow-1 d-flex gap-3">
            <div class="player-control">
                <span class="oi oi-media-step-backward" title="media set backward" aria-hidden="true"></span>
            </div>
            <div class="player-control" @onclick="PlayToggleBtnClicked">
                <span class="oi oi-media-@PlayToggleIcon" title="media set forward" aria-hidden="true"></span>
            </div>
            <div class="player-control">
                <span class="oi oi-media-step-forward" title="media set forward" aria-hidden="true"></span>
            </div>
            <div class="play-timeline flex-grow-1">
                <input type="range" min="0" max="100" @bind-value="playbackInfo.Volume">
            </div>
            <div class="player-control" @onmousedown="VolumnBtnClicked">
                <span class="oi oi-@VolumeIconName" title="media set forward" aria-hidden="true"></span>
            </div>
            <div class="player-control">
                <span class="oi oi-loop" title="media set forward" aria-hidden="true"></span>
            </div>
            <div class="player-control">
                <span class="oi oi-data-transfer-download" title="media set forward" aria-hidden="true"></span>
            </div>
        </div>
    </div>
</div>


@code {
@inject IHowl Howl;

    @inject IHowlGlobal HowlGlobal;
    @inject HttpClient HttpClient;


    private PlaybackInfo playbackInfo = new PlaybackInfo();
    private bool volumeSliderShown = false;

    private string PlayToggleIcon
    {
        get
        {
            return playbackInfo.PlaybackStatus == PlaybackStatus.Playing ? "pause" : "play";
        }
    }

    private string VolumeIconName
    {
        get
        {
            if (playbackInfo.Muted)
            {
                return "volume-off";
            }

            if (playbackInfo.Volume >= 60)
            {
                return "volume-high";
            }
            else if (playbackInfo.Volume >= 0)
            {
                return "volume-low";
            }
            else
            {
                return "volume-off";
            }
        }
    }

    private async void ChangeTrack(string filename = "AudioMainFile/Aalo_Tahsan.mp3")
    {
        if (playbackInfo.PlaybackStatus != PlaybackStatus.Playing)
        {
            using var requestMessage = new HttpRequestMessage(HttpMethod.Get, "");
            requestMessage.Headers.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:100.0) Gecko/20100101 Firefox/100.0");
            var response = await HttpClient.SendAsync(requestMessage);

            if (response.IsSuccessStatusCode)
            {
                var trackResponse = await response.Content.ReadFromJsonAsync<TrackBlobResponse>();
                playbackInfo.CurentTrackId = await Howl.Play(trackResponse!.Data);
            }
        }
    }

    private async void PlayToggleBtnClicked()
    {
        switch (playbackInfo.PlaybackStatus)
        {
            case PlaybackStatus.Paused:
                playbackInfo.PlaybackStatus = PlaybackStatus.Playing;
                await Howl.Play(playbackInfo.CurentTrackId);
                break;
            case PlaybackStatus.Playing:
                playbackInfo.PlaybackStatus = PlaybackStatus.Paused;
                await Howl.Pause(playbackInfo.CurentTrackId);
                break;
            default:
                break;
        }
    }

    private void VolumnBtnClicked(MouseEventArgs args)
    {
        if (args.Button == 0)
        {
            volumeSliderShown = !volumeSliderShown;
        }
        else if (args.Button == 1)
        {
            playbackInfo.Muted = !playbackInfo.Muted;
            HowlGlobal.Mute(playbackInfo.Muted);
        }
    }
}
